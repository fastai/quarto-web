---
title: Developing with Lua
---

## Overview

The programming language used to create [filters](filters.qmd) and [shortcodes](shortcodes.qmd) is Lua, a lightweight, high-level scripting language. [Lua](https://www.lua.org/) is the extension language for Pandoc (which includes an embedded Lua interpreter). This means that Quarto extensions have no additional runtime dependencies or requirements.

This article will start by providing an orientation to learning Lua for those new to the language. Then, we'll provide some tips for productive Lua development. Finally, we'll provide a reference to the built in Lua functions provided by Quarto to assist in developing extensions.

## Learning Lua

Lua is a scripting language similar to Python, R, Julia, and JavaScript. If you are familiar with one or more of those languages you won't have trouble picking up Lua.

Here is a recommended approach for learning Lua for use with Quarto:

1.  Read [Learn Lua in 15 Minutes](https://tylerneylon.com/a/learn-lua/) for a quick overview of the language and its syntax.

2.  Check out the [Filter Examples](https://pandoc.org/lua-filters.html#macro-substitution) from the Pandoc documentation to get an idea of what Pandoc Lua code looks like.

3.  Now that have the basic idea of Lua and filters, get a complete picture by reading the full [Pandoc Lua Filters](https://pandoc.org/lua-filters.html) documentation. You won't understand everything, but its a good orientation to all of the moving parts.

4.  Finally, check out the source code of the extensions published in the [Quarto Extensions](https://github.com/quarto-ext) GitHub organization (these are extensions maintained by the Quarto core team). Once you are able to read and understand that code you are ready to start developing your own extensions!

## Development and Debugging

Here are some tips for productive development and debugging of Quarto extensions with Lua:

1.  Develop filters and extensions using the [Quarto v1.2 Pre-Release](https://quarto.org/docs/download/prerelease.html), which includes support for live reload of `quarto preview` whenever a Lua source file changes.

2.  Use the [pandoc-lua-logging](https://github.com/wlupton/pandoc-lua-logging) library built in to Quarto to write debug output and inspect the Pandoc AST elements that you are producing and consuming. For example:

    ``` lua
    function Div(el)
      -- log a full object
      quarto.log.output(el)

      -- or just output some text
      quarto.log.output('debug info')
    end
    ```

    You'll see the output from `quarto.log` in the `quarto preview` terminal output stream . Note that the logging module requires the very latest release of Quarto (1.2.133). If you are using an earlier version you can still use the `quarto.utils.dump()` function for logging as described below.

3.  It can sometimes be helpful to change the output format of your document to `native` --- when you do this you'll see the full Pandoc AST rather than a rendering to HTML, PDF, etc. For example:

    ``` yaml
    title: "Document"
    format: native
    ```

Next we'll cover some of the Lua functions that are built-in to Quarto to assist with extension development. Note that these functions are in addition to the modules [provided natively](https://pandoc.org/lua-filters.html#module-text) by Pandoc which provide a lot of other useful functionality.

## Utility Functions

Various utility functions are provided, the most of important of which is the `quarto.utils.dump()` function (indispensable for debugging).

| Function                         | Description                                                                                                                                                                                    |
|-----------------|-------------------------------------------------------|
| `quarto.utils.dump(obj)`         | Dump a text representation of the passed object to stdout.                                                                                                                                     |
| `quarto.utils.resolvePath(path)` | Compute the full path to a file that is installed alongside your extension's Lua script. This is useful for *internal* resources that your filter needs but should not be visible to the user. |

For example, you can dump an element passed to a filter function as follows:

``` lua
function Div(el)
  quarto.utils.dump(el)
end
```

Note that newer versions of Quarto (v1.1.251 and higher) include the [pandoc-lua-logging](https://github.com/wlupton/pandoc-lua-logging) library, which should be used in preference to the dump function. For example:

``` lua
function Div(el)
  quarto.log.output(el)
end
```

## Format Detection

Extensions will often need to detect the current format to create custom content depending on the target output medium. The `quarto.doc.isFormat()` function

| Function                    | Description                                                                                                                                                                                                 |
|-----------------|-------------------------------------------------------|
| `quarto.doc.isFormat(name)` | Detect if the current format matches `name`.                                                                                                                                                                |
| `quarto.doc.hasBootstrap()` | Query whether [Bootstrap CSS](https://getbootstrap.com/) is available within the current document (it is by default for standard `html` documents but this may have been overridden by e.g. `theme: none`). |

The `name` parameter can match an exact Pandoc format name (e.g. `docx`, `latex`, etc. or can match based on an alias that groups commonly targeted formats together. The following values format aliases are handled specially by `quarto.doc.isFormat()`:

{{< include ../authoring/_format-aliases.md >}}

For example, here we check for PDF and HTML output:

``` lua
if quarto.doc.isFormat("pdf") then
  -- pdf specific output
elseif quarto.doc.isFormat("html") then
  -- html specific output
else
  -- output for other formats
end
```

For LaTeX output, you may need to additionally detect which citation utility and pdf engine are being used for the current render. You can use these functions to do that detection:

| Function                  | Description                                                                                                                      |
|------------------|------------------------------------------------------|
| `quarto.doc.citeMethod()` | Returns a string (`citeproc`, `natbib`, or `biblatex)` indicating the cite method in use.                                        |
| `quarto.doc.pdfEngine()`  | Returns a string (`pdflatex`, `xelatex`, `lualatex`, or `tectonic`) indicating the PDF engine being used to render the document. |

## Includes

Sometimes extensions need to inject content into the target document. There are three locations that content can be included (pass one of these locations as the first argument of the include functions):

| Location      | Description                                                         |
|------------------|------------------------------------------------------|
| `in-header`   | In the header of the document (HTML `<head>` tag or LaTeX preamble) |
| `before-body` | Before the document body                                            |
| `after-body`  | After the document body                                             |

Note that the included content should use the *raw target format* (e.g. HTML or LaTeX) rather than markdown. You can use these functions to include text or the contents of a file:

| Function                                 | Description                                                                                                                                                           |
|------------------|------------------------------------------------------|
| `quarto.doc.includeText(location, text)` | Include text at the specified location (`in-header`, `before-body`, or `after-body`)                                                                                  |
| `quarto.doc.includeFile(location, file)` | Include file at the specified location (`in-header`, `before-body`, or `after-body`). The path to the file should *relative* to the Lua script calling this function. |

For example the following code includes an HTML file after the body in the rendered document:

``` lua
quarto.doc.includeFile("after-body", "comments.html")
```

## Dependencies

Extensions will sometimes want to add external dependencies (for example, a JavaScript library and related CSS, or the usage of a LaTeX package). This can be accomplished with the following functions:

| Function                               | Description                                                                                                                                                                                                                                               |
|-----------------|-------------------------------------------------------|
| `quarto.doc.addHtmlDependency(dep)`    | Add an HTML dependency (additional resources and content) to a document. See docs on the [HTML Dependencies](#html-dependencies) below for additional details.                                                                                            |
| `quarto.doc.useLatexPackage(pkg, opt)` | Adds a `\usepackage` statement to the LaTeX output (along an options string specified in `opt`)                                                                                                                                                           |
| `quarto.doc.addFormatResource(path)`   | Add a format resource to the document. Format resources will be copied into the directory next to the rendered output. This is useful, for example, if your format references a `bst` or `cls` file which must be copied into the LaTeX output directory. |

For example, here we add a LaTeX package dependency:

``` lua
quarto.doc.useLatexPackage("gamebook")
```

#### HTML Dependencies {#html-dependencies}

HTML Dependencies can bundle together JavaScript, CSS, and even arbitrary content to inject into the `<head>` of the document. These dependencies have a name and a version, which is used to ensure that the same dependency isn't bundled into the document more than once.

The `dep` object passed to `quarto.doc.addHtmlDependency()` has the following fields:

| Field         | Description                                                                                                                                                                               |
|----------------|--------------------------------------------------------|
| `name`        | Unique name. Required.                                                                                                                                                                    |
| `version`     | Version number (as a string). Required.                                                                                                                                                   |
| `scripts`     | List of scripts to include (paths should be relative to the Lua file calling the function). Scripts can be either a simple path or a [script object](#script-object).                     |
| `stylesheets` | List of CSS style-sheets to include (paths should be relative to the Lua file calling the function). Stylesheets can either be a simple path or a [stylesheet object](#stylesheet-object) |
| `links`       | List of link tags to add to the document. Each tag should be a table with `rel` and `ref` (required) and optionally `type`                                                                |
| `resources`   | Additional files to copy to the input directory (each resource is an object with `name` (target file name in input directory) and `path` (source file name relative to Lua script).       |
| `meta`        | Table of optional `key = value` meta tags to insert into the document `<head>`                                                                                                            |
| `head`        | Arbitrary string to include in document `<head>`                                                                                                                                          |

For example, here we add a dependency to a JavaScript library:

``` lua
quarto.doc.addHtmlDependency({
  name = "glightbox",
  version = "3.2.0",
  scripts = {"glightbox.min.js"},
  stylesheets = {"glightbox.min.css"}
})
```

#### Script Object {#script-object}

The easiest way to specify `scripts` is with simple paths. However, in some cases you may need to add attributes to the `<script>` tag or specify that the script should go after the body. In those cases pass a script object:

| Field       | Description                                                       |
|------------------|------------------------------------------------------|
| `path`      | Path to the script (relative to the calling Lua script)           |
| `attribs`   | Table with `key = value` attributes to add to the `<script>` tag  |
| `afterBody` | Specify that the `<script>` tag should be inserted after the body |

For example, here update the previous example to add an `integrity` attribute to the script:

``` lua
quarto.doc.addHtmlDependency({
  name = "glightbox",
  version = "3.2.0",
  scripts = {
    { path = "glightbox.min.js ", attribs = {integrity = "R9GqQ8K/uxy9rx"} }
  },
  stylesheets = {"glightbox.min.css"}
})
```

#### Stylesheet Object {#stylesheet-object}

The easiest way to specify `stylesheets` is with simple paths. However, in some cases you may need to add attributes to the `<link>` tag generated for the stylesheet. In those cases pass a stylesheet object:

| Field     | Description                                                    |
|-----------------|-------------------------------------------------------|
| `path`    | Path to the stylesheet (relative to the calling Lua script)    |
| `attribs` | Table with `key = value` attributes to add to the `<link>` tag |

For example, here we update the previous example to add an `integrity` attribute to the stylesheet:

``` lua
quarto.doc.addHtmlDependency({
  name = "glightbox",
  version = "3.2.0",
  scripts = {
    { 
      path = "glightbox.min.js ", 
      attribs = {integrity = "R9GqQ8K/uxy9rx"} 
    }
  },
  stylesheets = {
    { 
      path = "glightbox.min.css ", 
      attribs = {integrity = "GYl1kPzQho1wx"} 
    }
  }
})
```

## Encoding

### JSON

Quarto includes a copy of [json.lua](https://github.com/rxi/json.lua). a lightweight JSON library for Lua. You can access the JSON functions as follows:

| Function                    | Description                            |
|-----------------------------|----------------------------------------|
| `quarto.json.encode(input)` | Encode a Lua table into a JSON string. |
| `quarto.json.decode(str)`   | Parse a JSON string into a Lua table.  |

For example, here we encode and then decode a table:

``` lua
local json = quarto.json.encode({foo = "bar"})
local obj = quarto.json.decode(json)
```

### Base 64

Quarto includes a copy of [lbase64](https://github.com/iskolbin/lbase64), a pure Lua implementation of Base64 encoding. You can access the Base 64 encoding functions as follows:

| Function                       | Description                   |
|--------------------------------|-------------------------------|
| `quarto.base64.encode(str)`    | Encode a string into Base 64. |
| `quarto.base64.decode(b64str)` | Decode a Base 64 string.      |
